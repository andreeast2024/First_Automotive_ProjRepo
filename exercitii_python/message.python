# EX1:
# a. Defineste o lista cu 3 elemente.
# b. Este lista o structura de date ordonata? De ce da/nu?
# c. Acceseaza al doilea element din lista si afiseaza-l.
# d. Afiseaza lungimea listei.

# lista = ['apa', 'paine', 'ulei']
# print(lista)
# print(lista[1])
# print(len(lista))

lista1 = [3, 1, 0, 2]
lista2 = [6, 5, 4]
lista3 = lista1 + lista2
print(lista3)
lista1.extend(lista2)
print(lista1)

# 2.a. Sorteaza lista generata la
# exercitiul 1, folosind functia
# built-in sorted().
# Afiseaza lista. Ce observi?
# b. Sorteaza lista generata la
# exercitiul 1 folosind o metoda
# ajutatoare de pe liste.
# Afiseaza lista. Ce observi?

print(sorted(lista1))
lista1.sort()
print(lista1)


# 3. Folosind un if, verifica daca lista
# generata la exercitiul 1 este goala,
# si afiseaza un mesaj corespunzator in
# functie de caz:
# - Lista este goala
# - Lista nu este goala

listanoua = [1]

if listanoua == []:
    print('lista e goala')
else:
    print('lista nu e goala')

if not listanoua:
    print('lista e goala')
else:
    print('lista nu e goala')

# 4. Foloseste o functie (metoda ajutatoare
# de pe lista) care sa stearga lista de la
# exercitiul 1.

lista1.clear()
print(lista1)

# 5. Copy paste la exercitiul 3.
# Verifica inca o data. Acum ar trebui
# sa se afiseze ca lista este goala.

print(len(lista1))
if len(lista1) == 0:
    print('lista e goala')
else:
    print('lista nu e goala')

# 6. Se da dictionarul:
# dict1 = {'Ana': 8, 'Gigel': 10, 'Dorel': 5}
#
# Foloseste o functie (metoda ajutatoare dictionar)
# ca sa afisezi numele elevilor (cheile)

dict1 = {'Ana': 8, 'Gigel': 10, 'Dorel': 5}
print(dict1.keys())
print(dict1.values())

# 7. Printeaza cei 3 elevi si notele lor.
# Exemplu: "Ana a luat nota 8".
# Doar nota o vei lua folosindu-te de cheie.

print(f'Ana a luat nota {dict1["Ana"]}')
print(f'Ana a luat nota {dict1.get("Ana")}.')
# daca numele nu exista in dictionar, punem un string, bool, etc:
print(f'Ana a luat nota {dict1.get("Mihaela", "cinci")}')

# 8. Dorel a facut contestatie si a primit 6.
# a. Modifica nota lui Dorel in 6.
# b. Printeaza nota dupa modificare
# 2 variante:
dict1.update({"Dorel": 6})
print(f'Dorel a luat nota {dict1.get("Dorel")}')
dict1['Dorel'] = 9
print(f'Dorel a luat nota {dict1.get("Dorel")}')

# 9. Gigel se transfera din clasa.
# a. Cauta o functie care sa il stearga. Afiseaza
# dictionarul dupa stergere
# b. Vine un coleg nou, Ionica. Adauga-l in dictionar
# si pune-i nota 9.
# c. Printeaza noii elevi.

dict1.pop("Gigel")
print(dict1)

dict1.update({'Ionica': 7})
print(dict1)

# putem adauga si asa:
dict1["Maria"]= 3
print(dict1)

# 10. Se dau urmatoarele seturi:
# zile_sapt = {"luni", "marti", "mercuri", "joi", "vineri", "sambata", "duminica"}
# weekend = {"sambata", "duminica"}
#
# a. Adauga in zile_sapt "luni".
# b. Afiseaza zile_sapt. Ce observi?

zile_sapt = {"luni", "marti", "mercuri", "joi", "vineri", "sambata", "duminica"}
weekend = {"sambata", "duminica"}

zile_sapt.add("luni")
print(zile_sapt)
# observ ca nu mi adauga un luni pt ca seturile nu au duplicate.

# 11. Folosind seturile de la exercitiul 10:
# a. Foloseste un if si verifica:
#  - daca weekend este un subset al zilelor din saptamana
#  - daca weekend nu este un subset al zilelor din saptamana
# Afiseaza un mesaj sugestiv in fiecare caz.

if weekend.issubset(zile_sapt):
    print('weekend este subset')
else:
    print('weekend nu este subset')

# 12. Folosind seturile de la exercitiul 10, afiseaza
# diferentele dintre cele 2 seturi.

weekend.difference(zile_sapt)
print(weekend)

zile_sapt.difference(weekend)
print(zile_sapt)

# 13. Folosind seturile de la exercitiul 10, afiseaza
# intersectia elementelor dintre cele 2 seturi

zile_sapt.intersection(weekend)
print(zile_sapt)

